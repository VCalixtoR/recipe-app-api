Django things:
    Commands:
        Build the project: django-admin startproject app .
        Testing:           python manage.py test
        Creating an app:   python manage.py startapp appname

    Registering an APP:
        first create the app: python manage.py startapp appname
        add its reference to the settings.py file inside INSTALLED_APPS like:
            'appname'
    
    Console printing
        self.stdout.write to console to the terminal
            self.style.SUCCESS inside to print green messages

    Creating Django management commands (Like the command to wait for db to be ready):
        inside the specific app, create the directory management/commands, both needs the __init__.py module
        create a class Command(BaseCommand): and a def handle(self, *args, **kwargs) that does the command operation
        after you can use the command in the command line :)


1: introduction

2: App Design
    19 endpoints
    User authentication
    Admin panel
    Swagger
    Techs: 
        Python
        Django: Python web framework
        Django add-on: Adds features to build REST APIs
        PostgreSQL: Use ORM to create
        Docker
        Swagger
        Github Actions
        AWS
    Project structure:
        app/ Djando project
        app/general/ Code shared between multiple apps, db definitions, etc
        app/user/ Code related operations
        app/recipe/ Code realted to recipes

3: Unit tests:
        Code that tests Code
        Runs a piece of Code
        Checks outputs with assertions
        Ensures that code runs as expected
        Catches Bugs
        Improves reliability
        Improves confidency to update the code
    TDD:
        Is a development practice to design tests before adding functionality
        Write test and write the code
            Write test > Run Test (Fails) > Add Feature > Run Test (Passes) > Re-Factor
        Why?
            Better undesrtanding of code
            Make changes with confidence
            Reduce Bugs 

4: System Setup: VS Code, Docker, Git

5: Project Setup
    Why docker?
        Consistent env between dev and prod
        Easier collaboration: Allows choosing specific OS and envs, allows using the same requirements
        Capture all requirements
        Easier cleanup: Allows deleting the images and everithing associated with the container
        Docker HUB: Allows storing and requesting images
    Why docker compose?
        Threats docker images as services, and you can handle more than one image per compose Setup
        Allows port mappings configuration in code
        Allows Volume mappings to get and insert files into container OS
    
    Create a authentication token in docker hub to use in integrations like GithubActions: https://hub.docker.com/settings/security?generateToken=true
    
    Create actions tokens to perform docker hub actenticated operations: https://github.com/VCalixtoR/recipe-app-api/settings/secrets/actions
        DOCKERHUB_USER=
        DOCKERHUB_TOKEN=
    
    Docker compose sample:
        docker-compose run --rm app sh -c "python manage.py collectstatic"
        --rm: to remove container on exit
        sh -c "python manage.py collectstatic": to pass a shell command to the container at the end of container creation
    Check Dockerfile and docker-compose for more details
    
    Linting: Running a tool that checks sintax patterns in code
        Highlights errors, typos, formatting issues
        We use flake8 in this course:
            Avoid installing test requirements in production, only release versions to production if they are tested and linted in development
            create a .flake8 in the app folder to exclude not owned code like __pycache__ for example
            the linting requirement is listed in requirements.dev.txt
            docker-compose run --rm app sh -c "flake8"
        
    Testing: We will use the Django test suit
        Setup Django app and run tests through Docker Compose
        docker-compose run --rm app sh -c "python manage.py test"

    Creating Django:
        docker-compose run --rm app sh -c "django-admin startproject app ."
        As we are using a volume between the container and local OS the created structure will be present locally too

    Release the project:
        After configuring the preview steps, do a docker-compose up and you are okay to go

6: Configuring Github Actions
    Github Actions is an CI CD automation tool that allows running tasks when code changes
    Allows running tests, code linting, deployment etc
        Flow: Trigger > Job > Result
    Files in .github/workflows/checks.yml can be another file name

7: Testing in Django
    Django comes with its test framework that uses unittest (Default to python language)
    Some particular features for Django base:
        Test client - A web browser to test like an outside client
        Simulate authentication
        Temporary database - Automatic create the database and finishes after the tests ends
    Django REST Framework:
        API Test client - Used to test api requests
    
    Test structure:
        The tests are placed in tests.py
        You can use tests/ subdirectory instead.
            In this case it needs to contain the __init__.py modules
            All tests need to start with test_
    
    Test Database:
        Allows testing code that uses databases (Do not use the real database to test)
        Django creates the database for testing
        The default form of doing that is by creating the database, running a single test and clearing the database
            Every test has a new database
            Is possible to avoid this and reusing the same dataset for more tests but it is not recommended
    
    Test Classes:
        SimpleTestCase: Do not have database integration, useful for no required database tests
        TestCase: Database required
    
    Writing test steps:
        Import test classes
        Import objects to test
        Define test class
        Add test method
        Setup inputs
        Execute code to be tested
        Check outputs

    For TDD: Write the test first and after the code

    Mocking: Override or change the behavior od dependencies
        Avoid unnitended side effects and isolate the code being tested
        Why?
            Avoid relying on external services like external APIs
            Avoid unitended consequences
            Speed up tests
        Example: Mock email sending steps to avoid sending it
        How:
            Use unittest.mock:
                MagicMock/Mock - Replace real objects
                Patch - Overrides code for tests

    Testing web requests:
        To test apis use APIClient 
            Make the request, check the result
            Override authentication
            Example:
                client = APIClient()
                res = client.get('/endpoint/')
                self.assertEquals(res.status_code, 200)

8: Configure Database
    We will use PostgreSQL created within a container (Service in docker-compose), it is easilly deployed locally
        An idea is to switch by running local within a container and in dev/prod in RDS
    Why using in a docker compose locally?
        Reusability
        Use persistance volumes to save the data
        Handles network configuration
        Environment variabel configuration
    
    Psycopg: The database connector (database adaptor) dependency that we will use in this course
        psycopg2-binary is not recommended for production environments
        psycopg2 is recommended but requires more dependencies that can causes conflicts between different OSs
            Not a problem for docker scenarios, you just need to configure aditional steps in the Dockerfile to handle its dependencies
    
    As the APP depends on the DB, use depends_on in the docker-compose
        depends_on does not guarantee that the database is ready, instead it guarantees that the service is started
        Solve it making django waits for db to be ready creating a custom django management command

    Creates a Django app: docker-compose run --rm app sh -c "python manage.py startapp appname"
    Makes the Django wait for DB to be ready using BaseCommands

    ORM: Allows creating db schema automatilcally given object declarations
        Focus on code
        Migrate easily between different dbs
        How?
            Define models > Generate migration files > Setup database > Store data
            Each model maps to a table, that contains:
                Name, Fields, Other metadata(Relation), custom python code
            Creating migrations
                The app must ne enabled in settings.py
                Wait for db to be ready
                Check model changes and creates migration file: python manage.py makemigrations
                Do the migration: python manage.py migrate

9: Create User Model

    Django authentication: Django comes with a buitin user authenctication
        Registration
        Login
        Auth
    Integrates with admin
    It has the defaulkt user but is best to define your own model

    AbstractBaseUser
        Provides features for authentication
        Does not include files
    Permissions Mixin
        Django Builtin permissions system :O

    Create the User model:
        class User(AbstractBaseUser, PermissionsMixin)
        USERNAME_FIELD = 'email' -> Changes tje username base field to email

    Use the model django.contrib.auth.get_user_model to get project default user model and voiding calling the custom model directory
    Use @example.com to test user emails
    get_user_model()...user.check_password is the default password check operation
    user.set_password() creates the password
    user.save(using=self.db) para salvar, using=self.db para indicar o banco no cenario de varios dbs
    objects = UserManager() inside a model to assign the user manager to a model

    If you have problems with migrations try to delete the docker volume with db data and redo the migration
        docker volume ls
        docker volume rm volume name
    
    self.assertRaises(ExceptionType) to assert if something raises an error

    def create_superuser in UserManager to replace deafult superuser creating
        make sure to use correct sintax: user.is_staff user.is_superuser
    
    http://localhost:8000/admin to access admin panel
        python manage.py createsuperuser

10: Setup django admin

    Django Admin is a graphical user for models:
        Allows CRUD operations
    Very little coding
    How to enable:
        Enable per model inside admin.py: Example: admin.site.register(Recipe)
    Its possible to Customise using the classes ModelAdmin and userAdmin
        ordering, list_display, fieldsets, readonly_fields, and other properties

    setUp methods inside a test class are done before each test
    Client() is the Django test client to make http requests
    Client().force_login(user) is a way to login
    django.urls.reverse to get specific urls to test or get for example

    admin.site.register(models.User, UserAdmin) inside admin to register a model, the UserAdmin is the custom you created with ordering, diplay etc

11: API Documentation

    "An API is only as good as its documentation"
    Document all endpoints, its support methods, payload formats, json formats, response format and authentication process
    We will use automated documentation using metadata

    Docs with Django REST Framework(DRF):
        Allows auto generating docs using the drf-spectacular library
            pip install drf-spectacular
        It generates schema (openapi.json?)
        The schema is used to generate a web interface that allows authentication and test to endpoints methods
    
    OpenAPI Schema is a  yaml/json standard for describing APIs
        Suported by most API documentation tools like Swagger
        Using: local importing the schema, in the browser /docs endpoint